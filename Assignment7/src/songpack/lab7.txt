/**
  * Colby Wirth
  * COS 285
  * Lab 7
  * 7 November, 2024
  */



 /**
     * helper method that checks the balance factor of a Tree
     * @param N the node being checked
     * @return int: -1 if left heavy | 2 if left heavy by 2 nodes | 0 if tree is balanced | 1 if right heavy | 2 if right heavy by 2 nodes
     */
    private int balanceFactor(Node N){

        if(N==null)
            return 0;

        return height(N.right) - height(N.left);
    }

    /**
     * This handles the logic for rebalancing an AVLTree
     * @param root the root node
     * @return root the root node - after rebalancing the tree
     */
    private Node rebalance(Node root){
        
        updateHeight(root);
        int bf = balanceFactor(root);

        //2L-L Case
        if(bf <-1 && balanceFactor(root.left)<0){
            rightRotation+=1;

            return rightRotate(root);
        }

        //2R-R Case
        if(bf >1 && balanceFactor(root.right) > 0){
            leftRotation+=1;

            return leftRotate(root);
        }
        
        //Left-Right Case
        if(bf <-1 & balanceFactor(root.left)>0){
            leftRightRotation+=1;
            root.left = leftRotate(root.left);

            return rightRotate(root);
        }

        //Right-Left Case
        if(bf >1 & balanceFactor(root.right)>0){

            rightLeftRotation+=1;
            root.right = rightRotate(root.right);

            return leftRotate(root);
        }
    
        return root;

    }
